/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,37],$V2=[1,38],$V3=[1,24],$V4=[1,35],$V5=[1,36],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,31],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[5,8,9,14,35,47,49,55,58,60,62,69,73,78,79,80,81],$Vh=[1,46],$Vi=[1,51],$Vj=[1,52],$Vk=[1,54],$Vl=[1,63],$Vm=[1,70],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,80],$Vv=[1,81],$Vw=[37,46],$Vx=[17,37],$Vy=[14,36,91,105,106,107,110,111,112],$Vz=[17,37,38,39,46,49,56,63,64,72,91,92,93,94,95,96,97,98,99,100,101,102,103,104],$VA=[1,105],$VB=[1,92],$VC=[1,91],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[17,37,38,46,49,64,72,91,92,93,94,95,96,97,98,99,100,101,102,103,104],$VQ=[1,123],$VR=[1,124],$VS=[1,132],$VT=[1,137],$VU=[2,7],$VV=[2,8],$VW=[2,9],$VX=[37,46,48,63],$VY=[17,37,39,46,63],$VZ=[17,37,38,46,49,64,72,91,92,97,98,99,100,101,102,103,104],$V_=[17,37,38,46,49,64,72,91,92,93,94,96,97,98,99,100,101,102,103,104],$V$=[17,37,38,46,49,64,72,101,102,103,104],$V01=[17,37,38,46,49,64,72,103,104],$V11=[1,181],$V21=[1,191],$V31=[1,200],$V41=[1,201],$V51=[1,202],$V61=[1,209],$V71=[1,210],$V81=[46,49],$V91=[5,8,9,14,35,47,49,55,58,60,62,69,70,73,78,79,80,81],$Va1=[49,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"sentencias":4,"EOF":5,"sentencia":6,"TipoVar":7,"Let":8,"Const":9,"TiposVars":10,"Number":11,"Boolean":12,"String":13,"IDENTIFICADOR":14,"Void":15,"decAsign":16,"PTCOMA":17,"Asignacion":18,"Print":19,"Funcion":20,"Retorno":21,"IFS":22,"SUICH":23,"Breik":24,"LLamadaEjec":25,"Continuar":26,"IncDec":27,"Wail":28,"DuWail":29,"ForNormal":30,"ForOfIn":31,"Grafica":32,"MatrixSen":33,"Tipos":34,"Graficar":35,"PARIZQ":36,"PARDER":37,"DosPuntos":38,"Igual":39,"expresion":40,"Dimensiones":41,"Dimension":42,"TipoDef":43,"ParamTipo":44,"ParamsTipo":45,"Coma":46,"Type":47,"LlaveI":48,"LLaveD":49,"signIncDec":50,"Incremento":51,"Decremento":52,"IgualMasIgual":53,"MasI":54,"Console":55,"Punto":56,"Log":57,"Function":58,"ParamsEntrada":59,"Return":60,"ContReturn":61,"Continue":62,"CORIZQ":63,"CORDER":64,"FuncionExp":65,"Parametros":66,"ParamEntrada":67,"BloqueSentencias":68,"If":69,"Else":70,"IFT":71,"Ternario":72,"Switch":73,"Casos":74,"Caso":75,"Case":76,"Default":77,"Break":78,"While":79,"Do":80,"For":81,"OfIn":82,"Of":83,"In":84,"primero":85,"Var":86,"BarraInv":87,"ini":88,"instrucciones":89,"ExpComa":90,"MENOS":91,"MAS":92,"POR":93,"DIVIDIDO":94,"Potencia":95,"Modulo":96,"Menor":97,"Mayor":98,"MenorIgual":99,"MayorIgual":100,"Diferente":101,"Comparacion":102,"And":103,"Or":104,"Not":105,"ENTERO":106,"DECIMAL":107,"AccesoMatrix":108,"AccesoAtributo":109,"CADENA":110,"Trues":111,"Falses":112,"ListaExp":113,"DimensionesVal":114,"Length":115,"DimensionVal":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"Let",9:"Const",11:"Number",12:"Boolean",13:"String",14:"IDENTIFICADOR",15:"Void",17:"PTCOMA",35:"Graficar",36:"PARIZQ",37:"PARDER",38:"DosPuntos",39:"Igual",46:"Coma",47:"Type",48:"LlaveI",49:"LLaveD",51:"Incremento",52:"Decremento",54:"MasI",55:"Console",56:"Punto",57:"Log",58:"Function",60:"Return",62:"Continue",63:"CORIZQ",64:"CORDER",69:"If",70:"Else",72:"Ternario",73:"Switch",76:"Case",77:"Default",78:"Break",79:"While",80:"Do",81:"For",83:"Of",84:"In",86:"Var",87:"BarraInv",89:"instrucciones",91:"MENOS",92:"MAS",93:"POR",94:"DIVIDIDO",95:"Potencia",96:"Modulo",97:"Menor",98:"Mayor",99:"MenorIgual",100:"MayorIgual",101:"Diferente",102:"Comparacion",103:"And",104:"Or",105:"Not",106:"ENTERO",107:"DECIMAL",110:"CADENA",111:"Trues",112:"Falses",115:"Length"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,1],[7,1],[10,1],[10,1],[10,1],[10,1],[10,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[32,4],[16,6],[16,6],[16,6],[16,4],[16,8],[43,1],[43,1],[43,1],[44,3],[44,3],[45,3],[45,1],[34,7],[27,2],[50,1],[50,1],[18,4],[53,1],[53,1],[19,7],[20,10],[21,3],[61,1],[61,0],[26,2],[41,2],[41,1],[42,2],[65,4],[66,3],[66,1],[59,3],[59,1],[59,0],[67,3],[67,4],[68,3],[68,2],[22,7],[22,7],[22,5],[71,6],[23,7],[74,2],[74,1],[75,6],[75,5],[24,2],[28,7],[29,9],[30,11],[31,10],[82,1],[82,1],[85,7],[88,2],[90,3],[90,1],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,3],[40,5],[113,3],[113,1],[113,0],[25,4],[108,2],[108,3],[108,4],[109,3],[114,2],[114,1],[116,3],[33,5],[33,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 5:
this.$ = true;
break;
case 6:
this.$ = false;
break;
case 12:
this.$ = $$[$0-1];
break;
case 13: case 14:
this.$ = $$[$0];
break;
case 15: case 16: case 17: case 18: case 19: case 21: case 23: case 24: case 25: case 53:
this.$=$$[$0];
break;
case 20: case 22: case 67:
this.$=$$[$0-1];
break;
case 31: case 32:
this.$ = Declaracion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 33:
this.$=Declaracion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 34:
this.$=Declaracion($$[$0-3],$$[$0-2],0,$$[$0]);
break;
case 44:
this.$ = IncDec($$[$0-1],$$[$0]);
break;
case 47:
this.$=Asignacion($$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 50:
this.$ = Imprimir($$[$0-2]);
break;
case 51:
this.$=Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 52:
this.$=Return($$[$0-1]);
break;
case 55:
this.$=Continuar();
break;
case 62: case 116:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 63: case 75: case 117:
this.$=[$$[$0]];
break;
case 65:
this.$=ParamE($$[$0-2],$$[$0]);
break;
case 68:
this.$=0;
break;
case 69:
this.$=Si($$[$0-4],$$[$0-2],[$$[$0]]);
break;
case 70:
this.$=Si($$[$0-4],$$[$0-2],$$[$0]);
break;
case 71:
this.$=Si($$[$0-2],$$[$0]);
break;
case 72:
$$[$0-5].push($$[$0-3]);$$[$0-5].push($$[$0-1]);this.$ = $$[$0-5];
break;
case 73:
this.$=Switch($$[$0-4],$$[$0-1]);
break;
case 74:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 76:
this.$ = Caso($$[$0-4],$$[$0-1]);console.log(this.$);
break;
case 77:
this.$=Caso(0,$$[$0-1]);
break;
case 78:
this.$=Breik();
break;
case 79:
this.$=While($$[$0-4],$$[$0-1]);
break;
case 80:
this.$=DoWhile($$[$0-6],$$[$0-2]);
break;
case 81:
this.$=For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 89:
 this.$ = Operaciones($$[$0],$$[$0],0,operacion.Negativo,this._$.first_line,this._$.first_column ); 
break;
case 90:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Suma,this._$.first_line,this._$.first_column ); 
break;
case 91:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Resta,this._$.first_line,this._$.first_column ); 
break;
case 92:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Multi,this._$.first_line,this._$.first_column ); 
break;
case 93:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Divi,this._$.first_line,this._$.first_column ); 
break;
case 94:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Potencia,this._$.first_line,this._$.first_column ); 
break;
case 95:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Modulo,this._$.first_line,this._$.first_column ); 
break;
case 96:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Menor,this._$.first_line,this._$.first_column ); 
break;
case 97:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Mayor,this._$.first_line,this._$.first_column ); 
break;
case 98:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.MenorIgual,this._$.first_line,this._$.first_column ); 
break;
case 99:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.MayorIgual,this._$.first_line,this._$.first_column ); 
break;
case 100:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.Difer,this._$.first_line,this._$.first_column ); 
break;
case 101:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.Igual,this._$.first_line,this._$.first_column ); 
break;
case 102:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.And,this._$.first_line,this._$.first_column ); 
break;
case 103:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Or,this._$.first_line,this._$.first_column ); 
break;
case 104:
 this.$ = Operaciones($$[$0],$$[$0],0,operacion.Not,this._$.first_line,this._$.first_column ); 
break;
case 105: case 106:
 this.$ = AritmeticaConst(primitivos.Numero,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 107:
 this.$ = AritmeticaConst(primitivos.Identificador,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 108:
 this.$ = AritmeticaConst(primitivos.LLamarFuncion,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 111:
 this.$ = AritmeticaConst(primitivos.Cadena,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 112:
 this.$ = AritmeticaConst(primitivos.Booleano,true,this._$.first_line,this._$.first_column); 
break;
case 113:
 this.$ = AritmeticaConst(primitivos.Booleano,false,this._$.first_line,this._$.first_column); 
break;
case 114:
 this.$ = $$[$0-1]; 
break;
case 115:
this.$= Operaciones($$[$0-4],$$[$0-2],$$[$0], operacion.Ternario,this._$.first_line,this._$.first_column);
break;
case 119:
this.$=LlamarF($$[$0-3],$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{1:[3]},{5:[1,39],6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{17:[1,41]},o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),{17:[1,42]},o($Vg,[2,21]),{17:[1,43]},o($Vg,[2,23]),o($Vg,[2,24]),o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,28]),o($Vg,[2,29]),{14:[1,44]},{36:$Vh,39:[1,49],50:47,51:$Vi,52:$Vj,53:45,54:[1,50],63:$Vk,114:48,116:53},{56:[1,55]},{14:[1,56]},{14:$Vl,17:[2,54],25:64,36:$Vm,40:58,61:57,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{36:[1,71]},{36:[1,72]},{17:[1,73]},{17:[1,74]},{36:[1,75]},{48:[1,76]},{36:[1,77]},{36:[1,78]},{14:[1,79]},{14:[2,5]},{14:[2,6]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,12]),o($Vg,[2,20]),o($Vg,[2,22]),{38:$Vu,39:$Vv},{14:$Vl,25:64,36:$Vm,40:82,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($Vw,[2,118],{25:64,108:65,109:66,113:83,40:84,14:$Vl,36:$Vm,91:$Vn,105:$Vo,106:$Vp,107:$Vq,110:$Vr,111:$Vs,112:$Vt}),o($Vx,[2,44]),{39:[1,85],63:$Vk,116:86},o($Vy,[2,48]),o($Vy,[2,49]),o($Vx,[2,45]),o($Vx,[2,46]),o($Vz,[2,125]),{14:$Vl,25:64,36:$Vm,40:87,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{57:[1,88]},{36:[1,89]},{17:[1,90]},{17:[2,53],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{14:$Vl,25:64,36:$Vm,40:106,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:107,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107],{116:53,114:108,36:$Vh,56:[1,109],63:$Vk}),o($VP,[2,108]),o($VP,[2,109]),o($VP,[2,110]),o($VP,[2,111]),o($VP,[2,112]),o($VP,[2,113]),{14:$Vl,25:64,36:$Vm,40:110,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:111,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:112,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($Vg,[2,78]),o($Vg,[2,55]),{14:$Vl,25:64,36:$Vm,40:113,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{2:$V0,4:114,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{7:116,8:$V1,9:$V2,16:115},{37:[1,117]},{39:[1,118]},{10:122,11:[1,119],12:[1,120],13:[1,121],14:$VQ,15:$VR},{14:$Vl,25:64,36:$Vm,40:125,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{17:[1,126],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{37:[1,127],46:[1,128]},o($Vw,[2,117],{72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO}),{14:$Vl,25:64,36:$Vm,40:130,41:129,42:131,63:$VS,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($Vz,[2,124]),{64:[1,133],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{36:[1,134]},o($Vw,[2,64],{59:135,67:136,14:$VT}),o($Vg,[2,52]),{14:$Vl,25:64,36:$Vm,40:138,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:139,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:140,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:141,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:142,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:143,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:144,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:145,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:146,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:147,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:148,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:149,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:150,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:151,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:152,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($VP,[2,89]),o($VP,[2,104]),o($VP,[2,120],{116:86,56:[1,153],63:$Vk}),{14:[1,155],115:[1,154]},{37:[1,156],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{37:[1,157],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{37:[1,158],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{37:[1,159],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,160],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{17:[1,161]},{14:[1,162]},{17:[1,163]},{48:[1,164]},{39:[1,165],63:$VU},{39:[1,166],63:$VV},{39:[1,167],63:$VW},{41:168,42:131,63:$VS},o($VX,[2,10]),o($VX,[2,11]),{17:[2,34],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},o($Vg,[2,47]),o($VP,[2,119]),{14:$Vl,25:64,36:$Vm,40:169,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{17:[1,170],42:171,63:$VS},{17:[1,172],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},o($VY,[2,57]),{64:[1,173]},o($Vz,[2,126]),{14:$Vl,25:64,36:$Vm,40:174,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{37:[1,175],46:[1,176]},o($Vw,[2,63]),{38:[1,177]},o($VZ,[2,90],{93:$VD,94:$VE,95:$VF,96:$VG}),o($VZ,[2,91],{93:$VD,94:$VE,95:$VF,96:$VG}),o($V_,[2,92],{95:$VF}),o($V_,[2,93],{95:$VF}),o($VP,[2,94]),o($V_,[2,95],{95:$VF}),o($V$,[2,96],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG}),o($V$,[2,97],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG}),o($V$,[2,98],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG}),o($V$,[2,99],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG}),o($V$,[2,100],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK}),o($V$,[2,101],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK}),o($V01,[2,102],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($V01,[2,103],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),{38:[1,178],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{115:[1,179]},o($VP,[2,121]),o($VP,[2,123]),o($VP,[2,114]),{48:$V11,68:180},{48:[1,182]},{48:[1,183]},{79:[1,184]},{14:$Vl,25:64,36:$Vm,40:185,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{38:$Vu,39:$Vv,82:186,83:[1,187],84:[1,188]},o($Vg,[2,30]),{14:$V21,44:190,45:189},{14:$Vl,25:64,36:$Vm,40:192,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:193,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:$Vl,25:64,36:$Vm,40:194,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{39:[1,195],42:171,63:$VS},o($Vw,[2,116],{72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO}),o($Vg,[2,127]),o($VY,[2,56]),o($Vg,[2,128]),o($VY,[2,58]),{37:[1,196],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{38:[1,197]},{14:$VT,67:198},{10:199,11:$V31,12:$V41,13:$V51,14:$VQ,15:$VR},{14:$Vl,25:64,36:$Vm,40:203,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},o($VP,[2,122]),o($Vg,[2,71],{70:[1,204]}),{2:$V0,4:205,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,206],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{74:207,75:208,76:$V61,77:$V71},{2:$V0,4:211,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{36:[1,212]},{17:[1,213],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{14:[1,214]},{14:[2,83]},{14:[2,84]},{46:[1,216],49:[1,215]},o($V81,[2,42]),{38:[1,217]},{17:[2,31],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{17:[2,32],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{17:[2,33],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{42:218,63:$VS},{17:[1,219]},{10:220,11:$V31,12:$V41,13:$V51,14:$VQ,15:$VR},o($Vw,[2,62]),o($Vw,[2,65],{42:131,41:221,63:$VS}),o($VX,$VU),o($VX,$VV),o($VX,$VW),o([17,37,38,46,49,64,72],[2,115],{91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO}),{22:222,48:$V11,68:223,69:$Va},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,224],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($V91,[2,68]),{49:[1,225],75:226,76:$V61,77:$V71},o($Va1,[2,75]),{14:$Vl,25:64,36:$Vm,40:227,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{38:[1,228]},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,229],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{14:$Vl,25:64,36:$Vm,40:230,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{14:[1,232],27:231},{37:[1,233]},{17:[1,234]},{14:$V21,44:235},{11:[1,238],12:[1,239],13:[1,240],14:$Vl,25:64,36:$Vm,40:236,43:237,91:$Vn,105:$Vo,106:$Vp,107:$Vq,108:65,109:66,110:$Vr,111:$Vs,112:$Vt},{17:[1,241]},o($Vg,[2,50]),{48:[1,242]},o($Vw,[2,66],{42:171,63:$VS}),o($Vg,[2,69]),o($Vg,[2,70]),o($V91,[2,67]),o($Vg,[2,73]),o($Va1,[2,74]),{38:[1,243],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{48:[1,244]},o($Vg,[2,79]),{37:[1,245],72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO},{37:[1,246]},{50:47,51:$Vi,52:$Vj},{48:[1,247]},o($Vg,[2,43]),o($V81,[2,41]),o($V81,[2,39],{72:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO}),o($V81,[2,40]),o($V81,[2,36]),o($V81,[2,37]),o($V81,[2,38]),{17:[2,35]},{2:$V0,4:248,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{48:[1,249]},{2:$V0,4:250,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{17:[1,251]},{48:[1,252]},{2:$V0,4:253,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,254],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{2:$V0,4:255,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,256],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($Vg,[2,80]),{2:$V0,4:257,6:3,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,258],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($Vg,[2,51]),{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,259],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($Va1,[2,77]),{6:40,7:23,8:$V1,9:$V2,14:$V3,16:5,18:6,19:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,30:18,31:19,32:20,33:21,34:22,35:$V4,47:$V5,49:[1,260],55:$V6,58:$V7,60:$V8,62:$V9,69:$Va,73:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf},o($Vg,[2,82]),o($Va1,[2,76]),o($Vg,[2,81])],
defaultActions: {37:[2,5],38:[2,6],39:[2,1],187:[2,83],188:[2,84],241:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:
break;
case 4:
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 110; 
break;
case 6:return 'REVALUAR';
break;
case 7:return 17;
break;
case 8:return 36;
break;
case 9:return 37;
break;
case 10:return 63;
break;
case 11:return 64;
break;
case 12:return 48;
break;
case 13:return 49;
break;
case 14:return 46;
break;
case 15:return 99;
break;
case 16:return 100;
break;
case 17:return 97;
break;
case 18:return 98;
break;
case 19:return 101;
break;
case 20:return 72;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 54
break;
case 24:return 92;
break;
case 25:return 91;
break;
case 26:return 93;
break;
case 27:return 94;
break;
case 28:return 95;
break;
case 29:return 96;
break;
case 30:return 'ComillaDoble';
break;
case 31:return 87;
break;
case 32:return 102;
break;
case 33:return 39;
break;
case 34:return 38;
break;
case 35:return 103;
break;
case 36:return 104;
break;
case 37:return 105;
break;
case 38:return 15;
break;
case 39:return 8;
break;
case 40:return 9;
break;
case 41:return 13;
break;
case 42:return 11;
break;
case 43:return 12;
break;
case 44:return 111;
break;
case 45:return 112;
break;
case 46:return 'Push';
break;
case 47:return 'Pop';
break;
case 48:return 115;
break;
case 49:return 55;
break;
case 50:return 57;
break;
case 51:return 56;
break;
case 52:return 58;
break;
case 53:return 60;
break;
case 54:return 69;
break;
case 55:return 70;
break;
case 56:return 73;
break;
case 57:return 78;
break;
case 58:return 76;
break;
case 59:return 62;
break;
case 60:return 80;
break;
case 61:return 79;
break;
case 62:return 81;
break;
case 63:return 83;
break;
case 64:return 84;
break;
case 65:return 35;
break;
case 66:return 47;
break;
case 67:return 77;
break;
case 68:return 14;
break;
case 69:return 107;
break;
case 70:return 106;
break;
case 71:return 5;
break;
case 72: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:'[^\']*'|"[^\"]*"|`[^\`]*`)/,/^(?:Evaluar\b)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:")/,/^(?:\\)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:\.)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:default\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}