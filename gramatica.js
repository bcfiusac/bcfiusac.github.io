/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,40],$V2=[1,41],$V3=[1,24],$V4=[1,38],$V5=[1,39],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,34],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[5,48],$Vi=[2,5,8,9,14,36,48,52,60,63,64,66,68,74,78,83,84,85,86],$Vj=[1,52],$Vk=[1,59],$Vl=[1,57],$Vm=[1,58],$Vn=[1,56],$Vo=[1,54],$Vp=[1,61],$Vq=[1,72],$Vr=[1,80],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,73],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,91],$VB=[14,37,97,111,112,113,114,115,116,117],$VC=[2,59],$VD=[2,131],$VE=[18,38],$VF=[18,38,39,40,45,48,49,59,77,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$VG=[1,119],$VH=[1,106],$VI=[1,105],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[18,38,39,45,48,49,77,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$VW=[1,131],$VX=[1,132],$VY=[1,133],$VZ=[1,136],$V_=[1,141],$V$=[1,152],$V01=[2,77],$V11=[2,6],$V21=[2,7],$V31=[2,8],$V41=[1,181],$V51=[2,9],$V61=[38,43,46,49],$V71=[1,184],$V81=[48,49],$V91=[18,38,39,45,48,49,77,97,98,103,104,105,106,107,108,109,110],$Va1=[18,38,39,45,48,49,77,97,98,99,100,102,103,104,105,106,107,108,109,110],$Vb1=[18,38,39,45,48,49,77,107,108,109,110],$Vc1=[18,38,39,45,48,49,77,109,110],$Vd1=[1,195],$Ve1=[1,205],$Vf1=[1,220],$Vg1=[1,221],$Vh1=[1,222],$Vi1=[1,223],$Vj1=[1,230],$Vk1=[1,231],$Vl1=[38,46,49],$Vm1=[2,5,8,9,14,36,48,52,60,63,64,66,68,74,75,78,83,84,85,86],$Vn1=[48,81,82],$Vo1=[45,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"sentencias":4,"EOF":5,"sentencia":6,"TipoVar":7,"Let":8,"Const":9,"TiposVars":10,"Number":11,"Boolean":12,"String":13,"IDENTIFICADOR":14,"Void":15,"TresBasicos":16,"decAsign":17,"PTCOMA":18,"decAsignType":19,"decAsignArray":20,"Asignacion":21,"Print":22,"Funcion":23,"Retorno":24,"IFS":25,"SUICH":26,"Breik":27,"LLamadaEjec":28,"Continuar":29,"IncDec":30,"Wail":31,"DuWail":32,"ForNormal":33,"Grafica":34,"Tipos":35,"Graficar":36,"PARIZQ":37,"PARDER":38,"DosPuntos":39,"Igual":40,"expresion":41,"Dimension":42,"CORIZQ":43,"ValsArray":44,"CORDER":45,"LlaveI":46,"ParamsTipo":47,"LLaveD":48,"Coma":49,"TipoDef":50,"ParamTipo":51,"Type":52,"signIncDec":53,"Incremento":54,"Decremento":55,"IgualMasIgual":56,"AccesoAtributo":57,"AccesoMatrix":58,"MasI":59,"Console":60,"Punto":61,"Log":62,"Dolar":63,"Function":64,"ParamsEntrada":65,"Return":66,"ContReturn":67,"Continue":68,"Dimensiones":69,"FuncionExp":70,"Parametros":71,"ParamEntrada":72,"BloqueSentencias":73,"If":74,"Else":75,"IFT":76,"Ternario":77,"Switch":78,"Casos":79,"Caso":80,"Case":81,"Default":82,"Break":83,"While":84,"Do":85,"For":86,"ForOfIn":87,"OfIn":88,"Of":89,"In":90,"primero":91,"Var":92,"BarraInv":93,"ini":94,"instrucciones":95,"ExpComa":96,"MENOS":97,"MAS":98,"POR":99,"DIVIDIDO":100,"Potencia":101,"Modulo":102,"Menor":103,"Mayor":104,"MenorIgual":105,"MayorIgual":106,"Diferente":107,"Comparacion":108,"And":109,"Or":110,"Not":111,"ENTERO":112,"DECIMAL":113,"Null":114,"CADENA":115,"Trues":116,"Falses":117,"ListaExp":118,"DimensionVal":119,"Length":120,"DimensionesVal":121,"MatrixSen":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"Let",9:"Const",11:"Number",12:"Boolean",13:"String",14:"IDENTIFICADOR",15:"Void",18:"PTCOMA",36:"Graficar",37:"PARIZQ",38:"PARDER",39:"DosPuntos",40:"Igual",43:"CORIZQ",45:"CORDER",46:"LlaveI",48:"LLaveD",49:"Coma",52:"Type",54:"Incremento",55:"Decremento",59:"MasI",60:"Console",61:"Punto",62:"Log",63:"Dolar",64:"Function",66:"Return",68:"Continue",74:"If",75:"Else",77:"Ternario",78:"Switch",81:"Case",82:"Default",83:"Break",84:"While",85:"Do",86:"For",89:"Of",90:"In",92:"Var",93:"BarraInv",95:"instrucciones",97:"MENOS",98:"MAS",99:"POR",100:"DIVIDIDO",101:"Potencia",102:"Modulo",103:"Menor",104:"Mayor",105:"MenorIgual",106:"MayorIgual",107:"Diferente",108:"Comparacion",109:"And",110:"Or",111:"Not",112:"ENTERO",113:"DECIMAL",114:"Null",115:"CADENA",116:"Trues",117:"Falses",120:"Length"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[10,1],[10,1],[10,1],[10,1],[10,1],[16,1],[16,1],[16,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[34,4],[17,6],[17,6],[17,6],[17,4],[17,9],[19,8],[20,5],[44,3],[44,1],[44,0],[50,1],[50,1],[50,1],[51,3],[51,3],[47,3],[47,1],[35,7],[30,2],[53,1],[53,1],[21,4],[21,4],[21,4],[21,6],[56,1],[56,1],[22,7],[22,5],[23,10],[23,8],[24,3],[67,1],[67,0],[29,2],[69,2],[69,1],[42,2],[70,4],[71,3],[71,1],[65,3],[65,1],[65,0],[72,3],[73,3],[73,2],[25,7],[25,7],[25,5],[76,6],[26,7],[79,2],[79,1],[80,6],[80,5],[27,2],[31,7],[32,9],[33,11],[87,10],[88,1],[88,1],[91,7],[94,2],[96,3],[96,1],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,3],[41,5],[118,3],[118,1],[118,0],[28,4],[58,2],[58,3],[57,3],[57,5],[121,2],[121,1],[119,3],[122,5],[122,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$ = $$[$0];this.$.unshift($$[$0-1]);
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
this.$ = true;
break;
case 5:
this.$ = false;
break;
case 14:
this.$ = $$[$0-1];
break;
case 15: case 16: case 24: case 26: case 79: case 139:
this.$=$$[$0-1];
break;
case 17: case 18:
this.$ = $$[$0];
break;
case 19: case 20: case 21: case 22: case 23: case 25: case 27: case 28: case 29: case 30: case 31: case 66:
this.$=$$[$0];
break;
case 32:

	const error = Error ('Sintactico',yytext ,this._$.first_line,this._$.first_column);
	Horrores.push(error);
break;
case 33:
this.$=Graficar();
break;
case 34: case 35:
this.$ = Declaracion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 36:
this.$=Declaracion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 37:
this.$=Declaracion($$[$0-3],$$[$0-2],0,$$[$0]);
break;
case 38:
this.$=DecArreglo($$[$0-8],$$[$0-7],$$[$0-5],$$[$0-1])
break;
case 39:
this.$=Declaracion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 40:
this.$=DecArreglo($$[$0-4],$$[$0-3],$$[$0-1],0);
break;
case 41: case 49:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 42: case 50: case 76: case 87: case 130:
this.$=[$$[$0]];
break;
case 43: case 77: case 131:
this.$=[];
break;
case 47: case 48:
this.$= ParamTipo($$[$0-2],$$[$0]);
break;
case 51:
this.$=Tipo($$[$0-5],$$[$0-2],true);
break;
case 52:
this.$ = IncDec($$[$0-1],$$[$0]);
break;
case 55: case 56: case 57:
this.$=Asignacion($$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 58:
this.$=Asignacion($$[$0-5],"xd",$$[$0-2]);
break;
case 61:
this.$ = Imprimir($$[$0-2]);
break;
case 62:
this.$=Imprimir($$[$0-2]);
break;
case 63:
this.$=Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 64:
this.$=Funcion($$[$0-6],$$[$0-4],0,$$[$0-1]);
break;
case 65:
this.$=Return($$[$0-1]);
break;
case 68:
this.$=Continuar();
break;
case 75: case 129:
this.$=$$[$0];this.$.unshift($$[$0-2]);
break;
case 78:
this.$=ParamE($$[$0-2],$$[$0]);
break;
case 80:
this.$=0;
break;
case 81:
this.$=Si($$[$0-4],$$[$0-2],[$$[$0]]);
break;
case 82:
this.$=Si($$[$0-4],$$[$0-2],$$[$0]);
break;
case 83:
this.$=Si($$[$0-2],$$[$0]);
break;
case 84:
$$[$0-5].push($$[$0-3]);$$[$0-5].push($$[$0-1]);this.$ = $$[$0-5];
break;
case 85:
this.$=Switch($$[$0-4],$$[$0-1]);
break;
case 86:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 88:
this.$ = Caso($$[$0-4],$$[$0-1]);
break;
case 89:
this.$=Caso(0,$$[$0-1]);
break;
case 90:
this.$=Breik();
break;
case 91:
this.$=While($$[$0-4],$$[$0-1]);
break;
case 92:
this.$=DoWhile($$[$0-6],$$[$0-2]);
break;
case 93:
this.$=For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 101:
 this.$ = Operaciones($$[$0],$$[$0],0,operacion.Negativo,this._$.first_line,this._$.first_column ); 
break;
case 102:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Suma,this._$.first_line,this._$.first_column ); 
break;
case 103:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Resta,this._$.first_line,this._$.first_column ); 
break;
case 104:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Multi,this._$.first_line,this._$.first_column ); 
break;
case 105:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Divi,this._$.first_line,this._$.first_column ); 
break;
case 106:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Potencia,this._$.first_line,this._$.first_column ); 
break;
case 107:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Modulo,this._$.first_line,this._$.first_column ); 
break;
case 108:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Menor,this._$.first_line,this._$.first_column ); 
break;
case 109:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Mayor,this._$.first_line,this._$.first_column ); 
break;
case 110:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.MenorIgual,this._$.first_line,this._$.first_column ); 
break;
case 111:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.MayorIgual,this._$.first_line,this._$.first_column ); 
break;
case 112:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.Difer,this._$.first_line,this._$.first_column ); 
break;
case 113:
 this.$ = Operaciones($$[$0-2],$$[$0],0, operacion.Igual,this._$.first_line,this._$.first_column ); 
break;
case 114:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.And,this._$.first_line,this._$.first_column ); 
break;
case 115:
 this.$ = Operaciones($$[$0-2], $$[$0],0, operacion.Or,this._$.first_line,this._$.first_column ); 
break;
case 116:
 this.$ = Operaciones($$[$0],$$[$0],0,operacion.Not,this._$.first_line,this._$.first_column ); 
break;
case 117: case 118:
 this.$ = AritmeticaConst(primitivos.Numero,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 119:
 this.$ = AritmeticaConst(primitivos.Identificador,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 120:
 this.$ = AritmeticaConst(primitivos.Null,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 121:
 this.$ = AritmeticaConst(primitivos.LLamarFuncion,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 122:
 this.$ = AritmeticaConst(primitivos.AccesoMatrix,$$[$0],this._$.first_line,this._$.first_column);
break;
case 123:
 this.$ = AritmeticaConst(primitivos.AccesoAtributo,$$[$0],this._$.first_line,this._$.first_column);
break;
case 124:
 this.$ = AritmeticaConst(primitivos.Cadena,$$[$0],this._$.first_line,this._$.first_column); 
break;
case 125:
 this.$ = AritmeticaConst(primitivos.Booleano,true,this._$.first_line,this._$.first_column); 
break;
case 126:
 this.$ = AritmeticaConst(primitivos.Booleano,false,this._$.first_line,this._$.first_column); 
break;
case 127:
 this.$ = $$[$0-1]; 
break;
case 128:
this.$= Operaciones($$[$0-4],$$[$0-2],$$[$0], operacion.Ternario,this._$.first_line,this._$.first_column);
break;
case 132:
this.$=LlamarF($$[$0-3],$$[$0-1]);
break;
case 133:
this.$=AccesoMatrix($$[$0-1],$$[$0]);
break;
case 134:
this.$=AccesoMatrix($$[$0-2],$$[$0-1]);
break;
case 135:
this.$ = AccesoAt($$[$0-2],$$[$0],-1);
break;
case 136:
this.$ = AccesoAt($$[$0-4],$$[$0-2],$$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{1:[3]},{5:[1,42]},o($Vh,[2,3],{6:3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,7:23,57:25,58:26,4:43,2:$V0,8:$V1,9:$V2,14:$V3,36:$V4,52:$V5,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg}),{18:[1,44]},{18:[1,45]},{18:[1,46]},o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),{18:[1,47]},o($Vi,[2,25]),{18:[1,48]},o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,31]),o($Vi,[2,32]),{14:[1,49]},{37:$Vj,40:[1,51],43:$Vk,53:53,54:$Vl,55:$Vm,56:50,59:$Vn,61:$Vo,119:55},{40:$Vp,56:60,59:$Vn},{40:$Vp,56:62,59:$Vn},{61:[1,63]},{46:[1,64]},{14:[1,65]},{14:$Vq,18:[2,67],28:74,37:$Vr,41:67,57:76,58:75,67:66,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{37:[1,81]},{37:[1,82]},{18:[1,83]},{18:[1,84]},{37:[1,85]},{46:[1,86]},{37:[1,87]},{37:[1,88]},{14:[1,89]},{14:[2,4]},{14:[2,5]},{1:[2,1]},o($Vh,[2,2]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,24]),o($Vi,[2,26]),{39:[1,90],40:$VA},{14:$Vq,28:74,37:$Vr,41:92,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VB,$VC,{46:[1,93]}),{14:$Vq,28:74,37:$Vr,38:$VD,41:95,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:94},o($VE,[2,52]),{14:[1,96],120:[1,97]},o($VF,[2,133]),o($VB,[2,60]),o($VE,[2,53]),o($VE,[2,54]),{14:$Vq,28:74,37:$Vr,41:98,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:99,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VB,$VC),{14:$Vq,28:74,37:$Vr,41:100,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{62:[1,101]},{14:$Vq,28:74,37:$Vr,41:102,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{37:[1,103]},{18:[1,104]},{18:[2,66],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{14:$Vq,28:74,37:$Vr,41:120,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:121,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VV,[2,117]),o($VV,[2,118]),o($VV,[2,119],{119:55,37:$Vj,43:$Vk,61:$Vo}),o($VV,[2,120]),o($VV,[2,121]),o($VV,[2,122]),o($VV,[2,123]),o($VV,[2,124]),o($VV,[2,125]),o($VV,[2,126]),{14:$Vq,28:74,37:$Vr,41:122,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:123,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:124,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($Vi,[2,90]),o($Vi,[2,68]),{14:$Vq,28:74,37:$Vr,41:125,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{2:$V0,4:126,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:128,8:$V1,9:$V2,17:127},{38:[1,129]},{40:[1,130]},{10:134,11:$VW,12:$VX,13:$VY,14:[1,135],15:$VZ},{14:$Vq,28:74,37:$Vr,41:137,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{18:[1,138],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{14:$V_,47:139,51:140},{38:[1,142]},{38:[2,130],49:[1,143],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},o($VF,[2,135],{61:[1,144]}),o($VF,[2,134]),{45:[1,145],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{18:[1,146],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{18:[1,147],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{37:[1,148]},{48:[1,149],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{14:$V$,38:$V01,65:150,72:151},o($Vi,[2,65]),{14:$Vq,28:74,37:$Vr,41:153,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:154,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:155,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:156,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:157,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:158,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:159,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:160,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:161,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:162,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:163,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:164,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:165,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:166,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:167,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VV,[2,101]),o($VV,[2,116]),{38:[1,168],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{38:[1,169],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{38:[1,170],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{38:[1,171],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{48:[1,172]},{18:[1,173]},{14:[1,174]},{18:[1,175]},{46:[1,176]},{40:[1,177],43:$V11},{40:[1,178],43:$V21},{40:[1,179],43:$V31},{42:180,43:$V41},{40:[1,182],43:$V51},o($V61,[2,10]),{18:[2,37],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},o($Vi,[2,55]),{48:[1,183],49:$V71},o($V81,[2,50]),{39:[1,185]},o($VV,[2,132]),{14:$Vq,28:74,37:$Vr,38:$VD,41:95,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz,118:186},{14:[1,187]},o($VF,[2,139]),o($Vi,[2,56]),o($Vi,[2,57]),{14:$Vq,28:74,37:$Vr,41:188,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{18:[1,189]},{38:[1,190]},{38:[2,76],49:[1,191]},{39:[1,192]},o($V91,[2,102],{99:$VJ,100:$VK,101:$VL,102:$VM}),o($V91,[2,103],{99:$VJ,100:$VK,101:$VL,102:$VM}),o($Va1,[2,104],{101:$VL}),o($Va1,[2,105],{101:$VL}),o($VV,[2,106]),o($Va1,[2,107],{101:$VL}),o($Vb1,[2,108],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vb1,[2,109],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vb1,[2,110],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vb1,[2,111],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM}),o($Vb1,[2,112],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ}),o($Vb1,[2,113],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ}),o($Vc1,[2,114],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS}),o($Vc1,[2,115],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS}),{39:[1,193],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},o($VV,[2,127]),{46:$Vd1,73:194},{46:[1,196]},{46:[1,197]},{84:[1,198]},{14:$Vq,28:74,37:$Vr,41:199,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{39:[1,200],40:$VA},o($Vi,[2,33]),{14:$V_,47:201,51:140},{14:$Vq,28:74,37:$Vr,41:202,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:203,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:$Vq,28:74,37:$Vr,41:204,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{18:[2,40],40:$Ve1},{45:[1,206]},{46:[1,207]},{18:[1,208]},{14:$V_,51:209},{11:[1,212],12:[1,213],13:[1,214],14:$Vq,28:74,37:$Vr,41:210,50:211,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{38:[2,129]},o($VF,[2,136]),{38:[1,215],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},o($Vi,[2,62]),{39:[1,216],46:[1,217]},{14:$V$,38:$V01,65:218,72:151},{10:219,11:$Vf1,12:$Vg1,13:$Vh1,14:$Vi1,15:$VZ},{14:$Vq,28:74,37:$Vr,41:224,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($Vi,[2,83],{75:[1,225]}),{2:$V0,4:226,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,48:[1,227],52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{79:228,80:229,81:$Vj1,82:$Vk1},{2:$V0,4:232,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{37:[1,233]},{18:[1,234],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{10:235,11:$VW,12:$VX,13:$VY,14:$Vi1,15:$VZ},{48:[1,236],49:$V71},{18:[2,34],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{18:[2,35],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{18:[2,36],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{43:[1,237]},o([18,40],[2,71]),{14:$V_,47:238,51:140},o($Vi,[2,58]),o($V81,[2,49]),o($V81,[2,47],{77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),o($V81,[2,48]),o($V81,[2,44]),o($V81,[2,45]),o($V81,[2,46]),{18:[1,239]},{10:240,11:$Vf1,12:$Vg1,13:$Vh1,14:$Vi1,15:$VZ},{2:$V0,4:241,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{38:[2,75]},o([38,49],[2,78]),o($Vl1,$V11),o($Vl1,$V21),o($Vl1,$V31),o($V61,$V51),o([18,38,39,45,48,49,77],[2,128],{97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),{25:242,46:$Vd1,73:243,74:$Vb},{48:[1,244]},o($Vm1,[2,80]),{48:[1,245],80:246,81:$Vj1,82:$Vk1},o($Vn1,[2,87]),{14:$Vq,28:74,37:$Vr,41:247,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{39:[1,248]},{48:[1,249]},{14:$Vq,28:74,37:$Vr,41:250,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{14:[1,252],30:251},{42:253,43:$V41},{18:[1,254]},o($Vo1,[2,43],{28:74,58:75,57:76,44:255,41:256,14:$Vq,37:$Vr,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz}),{48:[1,257],49:$V71},o($Vi,[2,61]),{46:[1,258]},{48:[1,259]},o($Vi,[2,81]),o($Vi,[2,82]),o($Vm1,[2,79]),o($Vi,[2,85]),o($Vn1,[2,86]),{39:[1,260],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{46:[1,261]},o($Vi,[2,91]),{38:[1,262],77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU},{38:[1,263]},{53:53,54:$Vl,55:$Vm},{40:$Ve1},o($Vi,[2,51]),{45:[1,264],49:[1,265]},o($Vo1,[2,42],{77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),{18:[2,39]},{2:$V0,4:266,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vi,[2,64]),{46:[1,267]},{2:$V0,4:268,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{18:[1,269]},{46:[1,270]},{18:[2,38]},{14:$Vq,28:74,37:$Vr,41:271,57:76,58:75,97:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{48:[1,272]},{2:$V0,4:273,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{48:[1,274]},o($Vi,[2,92]),{2:$V0,4:275,6:3,7:23,8:$V1,9:$V2,14:$V3,17:4,19:5,20:6,21:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:$V4,52:$V5,57:25,58:26,60:$V6,63:$V7,64:$V8,66:$V9,68:$Va,74:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vo1,[2,41],{77:$VG,97:$VH,98:$VI,99:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),o($Vi,[2,63]),{48:[1,276]},o($Vn1,[2,89]),{48:[1,277]},o($Vn1,[2,88]),o($Vi,[2,93])],
defaultActions: {40:[2,4],41:[2,5],42:[2,1],186:[2,129],218:[2,75],257:[2,39],264:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:
break;
case 4:
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 115; 
break;
case 6:return 'REVALUAR';
break;
case 7:return 18;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 43;
break;
case 11:return 45;
break;
case 12:return 46;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 105;
break;
case 16:return 106;
break;
case 17:return 103;
break;
case 18:return 104;
break;
case 19:return 107;
break;
case 20:return 77;
break;
case 21:return 54;
break;
case 22:return 55;
break;
case 23:return 59
break;
case 24:return 98;
break;
case 25:return 97;
break;
case 26:return 99;
break;
case 27:return 100;
break;
case 28:return 101;
break;
case 29:return 102;
break;
case 30:return 'ComillaDoble';
break;
case 31:return 93;
break;
case 32:return 108;
break;
case 33:return 40;
break;
case 34:return 39;
break;
case 35:return 109;
break;
case 36:return 110;
break;
case 37:return 111;
break;
case 38:return 63;
break;
case 39:return 15;
break;
case 40:return 8;
break;
case 41:return 9;
break;
case 42:return 13;
break;
case 43:return 11;
break;
case 44:return 12;
break;
case 45:return 116;
break;
case 46:return 117;
break;
case 47:return 'Push';
break;
case 48:return 'Pop';
break;
case 49:return 120;
break;
case 50:return 60;
break;
case 51:return 62;
break;
case 52:return 61;
break;
case 53:return 64;
break;
case 54:return 66;
break;
case 55:return 74;
break;
case 56:return 75;
break;
case 57:return 78;
break;
case 58:return 83;
break;
case 59:return 81;
break;
case 60:return 68;
break;
case 61:return 85;
break;
case 62:return 84;
break;
case 63:return 86;
break;
case 64:return 89;
break;
case 65:return 90;
break;
case 66:return 36;
break;
case 67:return 52;
break;
case 68:return 82;
break;
case 69:return 114;
break;
case 70:return 14;
break;
case 71:return 113;
break;
case 72:return 112;
break;
case 73:return 5;
break;
case 74:
	const error = Error ('Lexico', yy_.yytext ,yy_.yylloc.first_line,yy_.yylloc.first_column);
	Horrores.push(error);  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:'[^\']*'|"[^\"]*"|`[^\`]*`)/,/^(?:Evaluar\b)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:")/,/^(?:\\)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\$)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:\.)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:default\b)/,/^(?:null\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}